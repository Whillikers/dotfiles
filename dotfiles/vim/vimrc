""" This vimrc is a small 'core' of modifications relevant to both vim and
""" neovim. For full editing tasks, use nvim, configured in ~/.config/nvim.

""" Begin with tpope's vim-sensible (already run in neovim config)
if !has('nvim')
    runtime! plugin/sensible.vim
endif

" Settings contained within vim-sensible:
" set encoding=utf8 " Set utf8 as the standard encoding
" set backspace=indent,eol,start " Sane backspace behavior
" set incsearch " Highlight matches before search is complete
" set ruler " Show window measurements in the bottom right
" set wildmenu " Visual autocomplete for command menu

""" General
set nocompatible  " Disable vi compatibility
set modelines=0 " Disable modelines for security reasons
set mouse=a " Enable mouse support
set hidden " Enable background buffers
set lazyredraw " Do not redraw the screen while executing macros
set undofile " Persist undo history across multiple sessions
set undodir=~/.vim/undo " Set undo directory
set ffs=unix,dos,mac " Default to Unix line endings
set backupcopy=yes " Modify files in place
set updatetime=300 " Write swap files to disk every 300ms

" Use system clipboard
set clipboard=unnamed
set clipboard+=unnamedplus

" Add multi-line movement to jump list
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'

" Set keypress timeout
set ttimeoutlen=0 " NOTE: if this causes issues, set to 5; reduces time to esc
set timeoutlen=1000

" Avoid redrawing on every entered character by turning off arabic shaping
if has('arabic')
    set noarabicshape
endif

""" Mappings
" Use <Space> as the leader
let mapleader = "\<Space>"

" , repeats last movement in normal and visual mode
nnoremap , ;
vnoremap , ;

" < reverses last movement in normal mode
nnoremap < ,

" ; jumps between matching braces
nnoremap ; %

" ' jumps to a mark
nnoremap ' `

" ` activates the macro @a
nnoremap ` @a

" Enable repetition and macros across a visual selection
vnoremap . :normal .<CR>
vnoremap ` :normal @a<CR>

" <Space>/ clears highlighting
nnoremap <leader>/ :noh<cr>

" In vim, :W sudo saves the file
" (useful for handling the permission-denied error)
if !has('nvim')
    command! W execute 'w !sudo tee % > /dev/null' <bar> edit!
endif

" Move between splits with <Ctrl>-HJKL
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Return to last edit position when opening files
" From: https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Disable F1 (help) mapping
nmap <F1> <nop>

""" Search
set ignorecase smartcase " Only capital searches are case-sensitive
set gdefault " Replaces are global by default
set hlsearch " Highlight all search hits

" Persistent 'very magic' searches
nmap / /\v
nmap ? ?\v

""" Tabs
set tabstop=4 " Visual spaces per tab character
set softtabstop=4 " Spaces per soft-tab
set shiftwidth=4 " Amount to shift with < and >
set expandtab " Use <TAB> to insert spaces

""" Aesthetics
set termguicolors " Enable GUI colors in terminal mode
set showcmd  " Show partial commands in the bottom bar
syntax on " Enable syntax highlighting
set t_Co=256 " Enable 256 colors
colorscheme base16-gigavolt " Set colorscheme
set showmode " Show current mode (NOTE: overwritten in nvim config)
set number " Show current line number
set relativenumber " Use relative line numbers for all other numbers
set cursorline " Highlight the current line
set colorcolumn=80  " Show a column on line 80

set noerrorbells " Disable audio bell
set novisualbell " Disable visual bell

""" Plugins (configured separately for Vim and Neovim)
if !has('nvim')
    filetype off  " Temporarily disable filetype plugins
    call plug#begin('~/.vim/plugged')
        Plug 'tpope/vim-sensible' " Sensible starting defaults
        Plug 'ntpeters/vim-better-whitespace' " Whitespace stripping on save
        Plug 'Raimondi/delimitMate' " Autocomplete parentheses, etc
    call plug#end()
    filetype plugin indent on " Enable filetype plugins and indent files

    """ Configure vim-better-whitespace
    autocmd BufEnter * EnableStripWhitespaceOnSave  " Strip whitespace on save
    autocmd BufEnter * DisableWhitespace " Disable whitespace highlighting
    let g:strip_whitespace_confirm=0 " Do not ask before stripping whitespace
    let g:show_spaces_that_precede_tabs=1 " Show spaces around tabs
endif
